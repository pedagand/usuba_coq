embed {{ tex-preamble
  \usepackage{xfrac}
  \renewcommand{\[[TEX_NAME_PREFIX]]drule}[4][]{ { \dfrac{\begin{array}{c}#2\end{array} }{#3}\quad\ottdrulename{#4} } }
  \renewcommand{\[[TEX_NAME_PREFIX]]interrule}{\\[2.0mm]}
  \renewcommand{\[[TEX_NAME_PREFIX]]prodnewline}{\\[-0.2em]}
  \renewcommand{\[[TEX_NAME_PREFIX]]grammartabular}[1]
    {\begin{minipage}{\columnwidth}\begin{tabular}{ll}#1\end{tabular}\end{minipage} }
  \renewcommand{\[[TEX_NAME_PREFIX]]rulehead}[3]
    {$#1$  $#2$ & $#3$}
  \renewcommand{\[[TEX_NAME_PREFIX]]prodline}[6]
    { \quad $#1$ \ $#2$ & \quad $#3 #4$  $#5$  $#6$}
  \renewcommand{\[[TEX_NAME_PREFIX]]comp}[2]{\overline{#1} }
}}

metavar d, s, x, y, t, w, f ::= {{ com Term variables: $v, w \in \mathit{TermVar}$ }} {{ lex alphanum }}
metavar i, h, z, l {{ tex \ell }} ::= {{ com Integers: $x, y \in \mathbb{N}$ }} {{ lex numeral }}

indexvar n, m, j, k ::= {{ com Index variables }} {{ lex numeral }}

grammar

aop :: 'ArithOp' ::=
    | add                               :: :: Add
    | sub                               :: :: Sub
    | div                               :: :: Div
    | mul                               :: :: Mul
    | aop dir i                     :: :: Spec {{ tex [[aop]]_{[[dir]], [[i]]} }}

lop :: 'LogicOp' ::=
    | not                               :: S :: Not
    | and                               :: :: And {{ tex \& }}
    | or                                :: :: Or {{ tex \vert }}
    | xor                               :: :: Xor {{ tex \^ }}
    | andn                              :: :: Andn
    | lop dir i                         :: :: Spec {{ tex [[lop]]_{[[dir]], [[i]]} }}

sop :: 'ShiftOp' ::=
    | lshift                            :: :: Lshift
    | rshift                            :: :: Rshift
    | rashift                           :: :: RAshift
    | lrotate                           :: :: Lrotate
    | rrotate                           :: :: Rrotate
    | sop dir i                         :: :: Spec {{ tex [[sop]]_{[[dir]], [[i]]} }}

a :: 'AExp' ::=
    | aevar x                           :: :: Var_e
    | const_e z                         :: :: Const_e {{ tex [[z]] }}
    | a1 aop a2                         :: :: Op_e
    | abs( a )                          :: S :: Abs
    | ( a )                             :: S :: Parent
    | len </ an // n />                 :: S :: Len
    | prod form                         :: S :: Prod
    | z                                 :: S :: Const_e'
    | sum </ aon // n />                :: S :: SumOpt

v :: 'Var' ::=
    | Var x                             :: :: Var
    | index v a                         :: :: Index {{ tex [[v]] [ [[a]] ]}}
    | range v a1 a2                     :: :: Range {{ tex [[v]] [ [[a1]] .. [[a2]] ]}}
    | v [ </ an // , // n /> ]          :: :: Slice

e :: 'Exp' ::=
    | const z                           :: :: Const {{ tex [[z]] }}
    | evar v                            :: :: ExpVar
    | ( </ en // , // n /> )            :: :: Tuple
    | not e                             :: :: Not
    | lop [ l ] e                       :: S :: NotL {{ tex [[lop]]^{[[l]]} [[e]] }}
    | lop e                             :: S :: NotOp
    | e1 lop e2                         :: :: Log
    | e1 aop e2                         :: :: Arith
    | e sop a                           :: :: Shift
    | e1 lop [ l ] e2                   :: S :: LogL {{ tex [[e1]] [[lop]]^{[[l]]} [[e2]] }}
    | e1 aop [ l ] e2                   :: S :: ArithL {{ tex [[e1]] [[aop]]^{[[l]]} [[e2]] }}
    | e sop [ l ] a                     :: S :: ShiftL {{ tex [[e]] [[sop]]^{[[l]]} [[a]] }}
    | f ( </ en // , // n /> )          :: :: Fun
    | f < a > ( </ en // , // n /> )    :: :: Fun_v

deq :: 'Deq' ::=
    | </ vn // n /> <|- e                           :: :: EqnFalse
    | </ vn // n /> <:- e                           :: :: EqnTrue
    | for x = a1 to a2 do </ deqn // ; // n /> done
                                        :: :: Loop

nodeDef {{ tex node }} :: '' ::=
  | node f ( </ xm : typm // , // m /> ) -> ( </ yn : typ'n // , // n /> ) vars ( </ tj : typ''j // , // j /> ) </ deqk // ; // k /> :: :: Node

dir :: 'Dir' ::=
    | diru                              :: :: U {{ tex d }}
    | V                                 :: :: V
    | H                                 :: :: H
    | B                                 :: :: B

form :: 'Form' ::=
    | nil                                 :: :: nil
    | a cons form                         :: :: Cons
    | ( form )                            :: :: Paren

typ :: 'Type' ::=
    | sigma                               :: :: Sigma {{ tex \sigma }}
    | Uint dir i form                     :: :: Array

G {{ tex \Gamma }}:: 'TermCtxt' ::=
  | </ xn : typn // , // n /> :: :: List
  | G1 add G2 :: :: Add
  | ( G ) :: :: Parent

etype :: 'EType' ::=
  | from ( typ , a )                            :: :: Converted
  | ( dir , i , ao )                            :: :: Triple

etyp :: 'Etyp' ::=
  | normalize etyp                          :: :: Norm
  | flatten [ </ etypn // ; // n /> ]       :: :: Flatten
  | [ </ etypen // ; // n /> ]              :: :: Many
  | ( etyp )                                :: :: Paren
  | etyp [ </ dn <- d'n // n /> ; </ sm <- s'm // m /> ] :: :: Subst

etypL :: 'ETypeL' ::=
  | [ </ etypen // ; // n /> ]              :: :: List
  | etypen cons etypL                       :: :: Cons
  | ( etypL )                               :: :: Parent


typc :: 'TypeClass' ::=
  | Arith dir a                     :: :: Arith
  | Logic dir a                     :: :: Logic
  | Shift dir a1 a2                 :: :: Shift
  | typc [ </ dn <- d'n // n /> ; </ sm <- s'm // m /> ] :: :: Spec

ao :: 'OptionArith' ::=
  | Some a                          :: :: Some
  | None                            :: :: None
  | ao1 aop ao2                     :: :: Add
  | o                               :: :: Var {{ tex o }}
  | o1                              :: :: VarI {{ tex o_1 }}
  | o2                              :: :: VarIB {{ tex o_2 }}

typcL :: 'TypeClassL' ::=
  | </ typcn // n />                :: :: L
  | A                               :: :: Arch

progc :: 'ProgCtxt' ::=
  | nil                             :: :: Nil
  | progc <- nodeDef                :: :: Cons
  | P                               :: :: Var

terminals :: terminals_ ::=
    | <|-         ::  :: BindOnce {{ tex = }}
    | <:-         ::  :: BindMult {{ tex := }}
    | <-          ::  :: leftarrow {{ tex \leftarrow }}
    | ->          ::  :: rightarrow {{ tex \rightarrow }}
    | =>          ::  :: Rightarrow {{ tex \Rightarrow }}
    | <=          ::  :: leqslant {{ tex \leqslant }}
    | |->         ::  :: mapsto {{ tex \mapsto }}
    | |-          ::  :: vdash {{ tex \vdash }}
    | |-D         ::  :: vdashDeq {{ tex \vdash_D }}
    | ;           ::  :: semicolon {{ tex \; ; \; }}
    | .           ::  :: dot {{ tex . \; }}
    | ~>          ::  :: curly {{ tex \mathrel{\leadsto} }}
    | has         ::  :: in {{ tex \in }}
    | cons        ::  :: cons {{ tex :: }}
    | app         ::  :: app {{ tex ++ }}
    | forall      :: :: forall {{ tex \forall }}
    | foreach     :: :: foreach {{ tex \forall }}
    | add         :: :: add {{tex + }}
    | sub         :: :: Sub {{ tex - }}
    | div         :: :: Div {{ tex / }}
    | mul         :: :: Mul {{ tex \times }}
    | \/          :: :: PropOr {{ tex \lor }}
    | <>          :: :: Diff {{ tex \ne }}

defns Judgement :: '' ::=

defn G |- 0 <= a < i :: :: BoundedAExprEval :: 'BAEEval' by
defn G |- 0 <= </ an // n /> < i :: :: BoundedAExprEvalL :: 'BAEEvalL' by

defn G |- x : typ has G' :: :: CtxtVar :: 'CtxtVar' by

defn G |- </ vn : ( typn , an ) // n /> :: :: VarJudge :: 'VarJudge' by
G |- x : sigma has G
------------------------------ :: Var
G |- Var x : (sigma, const_e 1)

G |- v : (Uint dir i (const_e h cons form), a)
G |- 0 <= a < h
------------------------------ :: Ind
G |- index v a : (Uint dir i form, a)

G |- v : (Uint dir i (const_e h cons form), a)
G |- 0 <= a1 < h
G |- 0 <= a2 < h
------------------------------ :: Range
G |- range v a1 a2 : (Uint dir i form, a mul (abs(a1 sub a2) add const_e 1))

G |- v : (Uint dir i (const_e h cons form), a)
G |- 0 <= </ an // n /> < h
------------------------------ :: Slice
G |- v [</ an // n /> ] : (Uint dir i form, a mul len </ an // n /> )

defn A |- </ typcn // n /> :: :: ImplClass :: 'ITClass' by

defn form1 <> form2 \/ i1 <> i2 :: :: Diff :: '' by

defn dir1 <> dir2 \/ i1 <> i2 :: :: DiffD :: '' by


defn etype = etype' :: :: FromDef :: 'FromD' by
-------------------------------------------- :: BaseS
from (Uint dir i nil, 1) = (dir, i, None)


form <> nil \/ l <> 1
-------------------------------------------- :: BaseD
from (Uint dir i form, l) = (dir, i, Some (l mul prod form))

defn normalize etypL = etypL' :: :: CNorm :: 'CNorm' by
---------------------------------- :: BaseEmpty
normalize [ ] = [ ]

---------------------------------- :: Base
normalize [(dir, i, o)] = [(dir, i, o)]


normalize etypL = (dir, i, o1) cons etypL'
---------------------------------- :: RecSame
normalize ((dir, i, o2) cons etypL) = ((dir, i, o1 add o2) cons etypL')

normalize etypL = (dir2, i2, o2) cons etypL'
dir1 <> dir2 \/ i1 <> i2
---------------------------------- :: RecDiff
normalize ((dir1, i1, o1) cons etypL) = (dir1, i1, o1) cons (dir2, i2, o2) cons etypL'

defn G , progc , typcL |- </ en ~> e'n : etypn // n /> :: :: ExpTypeL :: 'EInfL' by
defn G , progc , typcL |- e1 ~> e2 : etyp :: :: ExpType :: 'EInf' by
G |- v : (Uint dir i form, l )
----------------------------- :: Var
G , P , A |- evar v ~> evar v : [from (Uint dir i form, l)]

G , P , A |- e1 ~> e'1 : [(dir, i, None)]
G , P , A |- e2 ~> e'2 : [(dir, i, None)]
A |- Arith dir i
------------------------------------------- :: Arith
G , P , A |- e1 aop e2 ~> e'1 aop dir i e'2 : [(dir, i, None)]

G , P , A |- e1 ~> e'1 : [(dir, i, Some l)]
G , P , A |- e2 ~> e'2 : [(dir, i, Some l)]
A |- Arith dir i
------------------------------------------- :: ArithL
G , P , A |- e1 aop e2 ~> e'1 aop dir i [l] e'2 : [(dir, i, Some l)]


G , P , A |- e1 ~> e'1 : [(dir, i, None)]
G , P , A |- e2 ~> e'2 : [(dir, i, None)]
A |- Logic dir i
-------------------------------------------- :: Logic
G , P , A |- e1 lop e2 ~> e'1 lop dir i e'2 : [(dir, i, None)]

G , P , A |- e1 ~> e'1 : [(dir, i, Some l)]
G , P , A |- e2 ~> e'2 : [(dir, i, Some l)]
A |- Logic dir i
-------------------------------------------- :: LogicL
G , P , A |- e1 lop e2 ~> e'1 lop dir i [l] e'2 : [(dir, i, Some l)]


G , P , A |- e ~> e' : [(dir, i, None)]
A |- Logic dir i
--------------------------------------------- :: Not
G , P , A |- not e ~> not dir i e' : [(dir, i, None)]

G , P , A |- e ~> e' : [(dir, i, Some l)]
A |- Logic dir i
--------------------------------------------- :: NotL
G , P , A |- not e ~> not dir i [l] e' : [(dir, i, Some l)]

G , P , A |- </ en ~> e'n : etypn // n />
---------------------------------------------- :: Tuple
G , P , A |- (</ en // n />) ~> (</ e'n // n />) : normalize (flatten [ </ etypn // n /> ])

P |- f : forall </ dn // n />, forall </ sm // m />, </ typcj // j /> => etyp1 -> etyp2
G , P , A |- (</ en // n />) ~> (</ e'n // n />) : etyp1 [ </ dn <- d'n // n /> ; </ sm <- s'm // m />]
A |- </ typcj [ </ dn <- d'n // n /> ; </ sm <- s'm // m />] // j />
----------------------------------------------------------------------------------- :: Fun
G , P , A |- f(</ en // n />) ~> f (</ e'n // n />) : etyp2 [ </ dn <- d'n // n /> ; </ sm <- s'm // m />]

defn G , progc , A |-D </ deqn ~> deq'n // n /> :: :: TypeDeq :: 'TDeq' by
G , P , A |- e ~> e' : normalize [ </ from (typn, an) // n /> ]
G |- </ vn : (typn, an) // n />
-------------------------------------------- :: EqnT
G , P , A |-D </ vn // n /> <:- e ~> </ vn // n /> <:- e'

G , P , A |- e ~> e' : etyp
G , P , A |- (</ evar vn // n />) ~> (</ evar vn // n />) : etyp
-------------------------------------------- :: EqnF
G , P , A |-D </ vn // n /> <|- e ~> </ vn // n /> <|- e'

foreach c has [ a1 , a2 ] . G , P , A |-D </ deqn [ x <- c ] ~> deq'n [ x <- c ] // n />
------------------------------------------------------- :: Loop
G , P , A |-D for x = a1 to a2 do </ deqn // n /> done ~> for x = a1 to a2 do </ deq'n // n /> done

defn nodeDef = nodeDef2 :: :: NodeEq :: 'NEq' by

defn progc |- f : forall </ xn // n /> , forall </ ym // m /> , typcL => etyp1 -> etyp2 :: :: ITypeFun :: 'IFun' by
</ xm : typm // m /> add </ yn : typ'n // n /> add </ tj : typ''j // j /> , P , A |-D deq ~> deq'
nodeDef =  node f ( </ xm : typm // m /> ) -> ( </ yn : typ'n // n /> ) vars ( </ tj : typ''j // j /> ) </ deqk // k />
------------------------------------------------------------------------------------------------------------- :: Node
P <- nodeDef |- f : forall </ dn // n /> , forall </ sm // m /> , A => normalize [</ from (typm, 1) // m />] -> normalize [</ from (typ'n, 1) // n />]

defn foreach c has [ a1 , a2 ] . G , P , A |-D </ deqn [ xn <- c ] ~> deq'n [ x'n <- c ] // n /> :: :: TypeLDeq :: 'TDeq' by

