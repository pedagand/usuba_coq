embed {{ tex-preamble
  \usepackage{xfrac}
  \renewcommand{\[[TEX_NAME_PREFIX]]drule}[4][]{ { \dfrac{\begin{array}{c}#2\end{array} }{#3}\quad\ottdrulename{#4} } }
  \renewcommand{\[[TEX_NAME_PREFIX]]interrule}{\\[2.0mm]}
  \renewcommand{\[[TEX_NAME_PREFIX]]prodnewline}{\\[-0.2em]}
  \renewcommand{\[[TEX_NAME_PREFIX]]grammartabular}[1]
    {\begin{minipage}{\columnwidth}\begin{tabular}{ll}#1\end{tabular}\end{minipage} }
  \renewcommand{\[[TEX_NAME_PREFIX]]metavartabular}[1]
    {\begin{minipage}{\columnwidth}\begin{tabular}{ll}#1\end{tabular}\end{minipage} }
  \renewcommand{\[[TEX_NAME_PREFIX]]rulehead}[3]
    {$#1$  $#2$ & $#3$}
  \renewcommand{\[[TEX_NAME_PREFIX]]prodline}[6]
    { \quad $#1$ \ $#2$ & \quad $#3 #4$  $#5$  $#6$}
  \renewcommand{\[[TEX_NAME_PREFIX]]comp}[2]{\overline{#1} }
}}

metavar i, d, s ::= {{ com Static Identifiers: $\in \mathit{Ident}$ }} {{ lex alphanum }}
metavar x, y, t ::= {{ com Dynamic Identifiers: $\in \mathit{Ident}$ }} {{ lex alphanum }}
metavar f       ::= {{ com Node Identifiers: $\in \mathit{Ident}$ }} {{ lex alphanum }}
metavar l {{ tex \ell }}, z ::= {{ com Integers: $\in \mathbb{N}$ }} {{ lex numeral }}

indexvar n, m, j, k ::= {{ com Index variables }} {{ lex numeral }}

grammar

aop :: 'ArithOp' ::=
    | add                               :: :: Add
    | sub                               :: :: Sub
    | div                               :: :: Div
    | mul                               :: :: Mul

lop :: 'LogicOp' ::=
    | and                               :: :: And {{ tex \& }}
    | or                                :: :: Or {{ tex \vert }}
    | xor                               :: :: Xor {{ tex \^ }}
    | andn                              :: :: Andn

sop :: 'ShiftOp' ::=
    | lshift                            :: :: Lshift
    | rshift                            :: :: Rshift
    | rashift                           :: :: RAshift
    | lrotate                           :: :: Lrotate
    | rrotate                           :: :: Rrotate

a :: 'AExp' ::=
    | i                                 :: :: Var_e {{ tex [[i]] }}
    | const_e z                         :: :: Const_e {{ tex [[z]] }}
    | a1 aop a2                         :: :: Op_e
    | a1 lshift a2                      :: S :: Lshift
    | abs( a )                          :: S :: Abs
    | ( a )                             :: S :: Parent
    | len </ an // n />                 :: S :: Len
    | lenExpr </ en // n />             :: S :: LenE
    | prod form                         :: S :: Prod
    | z                                 :: S :: Const_e'
    | sum </ aon // n />                :: S :: SumOpt
    | ( aevarH s )                      :: S :: Var_e' {{ tex [[s]] }}

aL :: '' ::=
    | </ an // , // n />                :: S :: L

ind :: 'Ind' ::=
    | index a                           :: :: Index {{ tex [[a]] }}
    | range a1 a2                       :: :: Range {{ tex [[a1]] .. [[a2]] }}
    | </ an // , // n />                :: :: Slice
    | slice aL                          :: S :: SliceB {{ tex [[aL]] }}

v :: 'Var' ::=
    | x                                 :: :: Var
    | v ind                             :: :: Index {{ tex [[v]] [ [[ind]] ]}}
    % | index v a                         :: :: Index {{ tex [[v]] [ [[a]] ]}}
    % | range v a1 a2                     :: :: Range {{ tex [[v]] [ [[a1]] .. [[a2]] ]}}
    % | v lb </ an // , // n /> rb        :: :: Slice
    | v lb </ indn // ; // n /> rb      :: S :: IndL


monop :: 'Monop' ::=
    | sop a                             :: :: SOp
    | not                               :: :: NotOp

binop :: 'BinOp' ::=
    | aop                               :: :: AOp
    | lop                               :: :: LOp

op :: 'Op' ::=
  | binop                               :: :: BOp {{ tex [[binop]] }}
  | monop                               :: :: MOp {{ tex [[monop]] }}

opi :: 'Op' ::=
  | op typ                              :: :: Op {{ tex [[op]]_{[[typ]]} }}

e :: 'Exp' ::=
    | const z                           :: :: Const {{ tex [[z]] }}
    | evar ( v )                        :: :: ExpVar {{ tex [[v]] }}
    | ( </ en // , // n /> )            :: :: Tuple
    |    monop typ e                    :: :: NotL   {{ tex           [[monop]]_{[[typ]]} \; [[e]] }}
    | e1 binop typ e2                   :: :: Log    {{ tex [[e1]] \; [[binop]]_{[[typ]]} \; [[e2]]}}
    | f ( </ en // , // n /> )          :: :: Fun
    | f < a > ( </ en // , // n /> )    :: :: Fun_v
    | [ </ en // , // n /> ]            :: S :: BuildArray
    | e into typL                       :: S :: Coercion

deq :: 'Deq' ::=
    | </ vn // n /> <|- e                           :: :: EqnFalse
    | </ vn // n /> <:- e                           :: :: EqnTrue
    | for i = a1 to a2 do </ deqn // ; // n /> done
                                        :: :: Loop

nodeDef {{ tex node }} :: 'node' ::=
  | node f ( </ xm : typm // , // m /> ) -> ( </ yn : typ'n // , // n /> ) vars ( </ tj : typ''j // , // j /> ) let </ deqk // ; // k /> tel :: :: Node
  | table f ( x : typ ) -> ( y : typ' ) [ </ an // , // n /> ] :: :: Table

dir :: 'Dir' ::=
    | V                                 :: :: V
    | H                                 :: :: H
    | d                                 :: :: Var

form :: 'Form' ::=
    | nil                                 :: :: nil
    | a cons form                         :: :: Cons
    | [ </ an // cons // n /> ]           :: :: Extend
    | [ </ an // cons // n /> ] add form  :: :: Add
    | ( form )                            :: :: Paren

size :: 'Size' ::=
    | s                                   :: :: SizeVar
    | z                                   :: :: SizeVal

typc :: 'TypeClass' ::=
  | Arith typ                             :: :: Arith
  | Logic typ                             :: :: Logic
  | Shift typ a2                          :: :: Shift
  | ClassOf op typ                        :: S :: COf
  | typc [ </ dn <- d'n // n /> ; </ sm <- s'm // m /> ] :: S :: Spec

A :: 'TypeClassL' ::= % TypeClass list
  | </ typcn // n />                :: :: L

P :: 'ProgCtxt' ::=
  | nil                             :: :: Nil
  | P <- nodeDef                    :: :: Cons

acL :: 'acL' ::=
  | </ [ an ] // n />              :: :: L

typi {{ tex \sigma }} :: 'TypeIn' ::=
  | U dir size                      :: :: Base
  % | D typi { a }                    :: :: Rec {{ tex [[typi]] \{ [[a]] \} }}
  % | typi </ { an } // n />          :: S :: RecH
  % | L typi acL                      :: S :: L {{ tex [[typi]] [[acL]] }}

typ {{ tex \tau }} :: 'TypeOut' ::=
  | typi                            :: :: I
  | D typ [ a ]                     :: :: D {{ tex [[typ]] [ [[a]] ] }}
  | typ </ [ an ] // n />           :: S :: A
  | ( typ )                         :: S :: Parent

typLL :: 'typLL' ::=
  | </ typLn // n /> :: :: T

typL {{ tex \mathcal{T} }} :: 'typL' ::=
    | </ typn // n />                     :: :: TypeL
    | normalize typLL                     :: S :: TypeLL {{ tex [[typLL]] }}
    | typL [ </ dn <- d'n // n /> ; </ sm <- s'm // m /> ]
                                          :: S :: Subst
    | typ cons typL                       :: S :: Cons
    | typ pow a                           :: S :: Pow {{ tex [[typ]]^{[[a]]} }}
    | ( typ pow a )                       :: S :: PowPF {{ tex ( [[typ]]^{[[a]]} ) }}
    | refresh typ                         :: S :: Refresh

G {{ tex \Gamma }}:: 'TermCtxt' ::=
  | </ xn : typn // , // n /> :: :: List
  | G1 add G2 :: S :: Add
  | ( G ) :: S :: Parent

terminals :: terminals_ ::=
    | <|-         ::  :: BindOnce {{ tex = }}
    | <:-         ::  :: BindMult {{ tex := }}
    | <-          ::  :: leftarrow {{ tex \leftarrow }}
    | ->          ::  :: rightarrow {{ tex \rightarrow }}
    | -[          ::  :: rightarrowB {{ tex - [ }}
    | ]->         ::  :: Brightarrow {{ tex ] \rightarrow }}
    | =>          ::  :: Rightarrow {{ tex \Rightarrow }}
    | <=          ::  :: leqslant {{ tex \leqslant }}
    | |->         ::  :: mapsto {{ tex \mapsto }}
    | |-          ::  :: vdash {{ tex \vdash }}
    | |-D         ::  :: vdashDeq {{ tex \vdash_D }}
    | |-E         ::  :: vdashExp {{ tex \vdash_E }}
    | |-EE        ::  :: vdashExpBis {{ tex \vdash_E }}
    | |-I         ::  :: vdashIdent {{ tex \vdash_I }}
    | |-V         ::  :: vdashVar {{ tex \vdash_V }}
    | ;           ::  :: semicolon {{ tex \; ; \; }}
    | .           ::  :: dot {{ tex . \; }}
    | ~>          ::  :: curly {{ tex \mathrel{\leadsto} }}
    | has         ::  :: in {{ tex \in }}
    | cons        ::  :: cons {{ tex :: }}
    | app         ::  :: app {{ tex ++ }}
    | forall      :: :: forall {{ tex \forall }}
    | foreach     :: :: foreach {{ tex \forall }}
    | add         :: :: add {{tex + }}
    | sub         :: :: Sub {{ tex - }}
    | div         :: :: Div {{ tex / }}
    | mul         :: :: Mul {{ tex \times }}
    | \/          :: :: PropOr {{ tex \lor }}
    | /\          :: :: PropAnd {{ tex \land }}
    | <>          :: :: Diff {{ tex \ne }}
    | lshift      :: :: Lshift {{ tex \ll }}
    | comp        :: :: CompRel {{ tex \cong }}
    | lb          :: :: LeftBracket {{ tex [ }}
    | rb          :: :: RightBracket {{ tex ] }}
    | lenExpr     :: :: Len {{ tex len }}

defns Judgement :: '' ::=

% defn |- 0 <= a < a :: :: BoundedAExprEval :: 'BAEEval' by
defn |- 0 <= </ an // n /> < a :: :: BoundedAExprEvalL :: 'BAEEvalL' by

defn G |-I x : typ has G' :: :: CtxtVar :: 'CtxtVar' by

defn typ1 -[ </ indm // ; // m /> ]-> typ2 :: :: IndexJudge :: '' by

typi </ [ dn ] // n /> -[ </ indm // m /> ]-> typi </ [ d'k ] // k />
|- 0 <= a < l
-------------------------------------------------------------------------- :: Index
typi [ l ] </ [ dn ] // n /> -[ index a ; </ indm // m /> ]-> typi </ [ d'k ] // k />

typi </ [ dn ] // n /> -[ </ indm // m /> ]-> typi </ [ d'k ] // k />
|- 0 <= a1 < l
|- 0 <= a2 < l
-------------------------------------------------------------------------- :: Range
typi [ l ] </ [ dn ] // n /> -[ range a1 a2 ; </ indm // m /> ]-> typi [ abs(a1 sub a2) add const_e 1 ] </ [ d'k ] // k />


typi </ [ dn ] // n /> -[ </ indm // m /> ]-> typi </ [ d'k ] // k />
|- 0 <= </ aj // j /> < l
------------------------------ :: Slice
typi [ l ] </ [ dn ] // n /> -[ slice </ aj // j /> ; </ indm // m /> ]-> typi [ len </ aj // j /> ] </ [ d'k ] // k />

defn G |-V </ vn // n /> : typL :: :: VarJudgeL :: '' by
defn G |-V v : typ :: :: VarJudge :: '' by

G |-I x : typ has G
------------------------------ :: Ident
G |-V x : typ


G |-V v : typ1
typ1 -[ </ indn // n /> ]-> typ2
---------------------------------- :: Indexing
G |-V v lb </ indn // n /> rb : typ2

% G |-V v : typi [ const_e l ] </ [ dn ] // n />
% |- 0 <= a < l
% ------------------------------ :: Index
% G |-V v index a : typi </ [dn] // n />

% G |-V v : typi [const_e l] </ [dn] // n />
% |- 0 <= a1 < l
% |- 0 <= a2 < l
% ------------------------------ :: Range
% G |-V v range a1 a2 : typi [abs(a1 sub a2) add const_e 1] </ [dn] // n />

% G |-V v : typi [const_e l] </ [dn] // n />
% |- 0 <= </ an // n /> < l
% ------------------------------ :: Slice
% G |-V v </ an // n /> : typi [len </ an // n />] </ [dn] // n />

defn A |- </ typcn // n /> :: :: TClass :: '' by

% A |- Arith typi
% ------------------ :: ArithLI
% A |- Arith typi{l}

A |- Arith typ
------------------ :: ArithL
A |- Arith typ[l]


% A |- Logic typi
% ------------------ :: LogicLI
% A |- Logic typi{l}

A |- Logic typ
------------------ :: LogicL
A |- Logic typ[l]


defn typL1 <> typL2 :: :: DiffT :: '' by

defn forall d , typL1 <> typL2 :: :: FDiffT :: '' by


defn form1 <> form2 \/ a1 <> a2 :: :: DiffFA :: '' by

defn a1 = a2 :: :: AExprEq :: '' by 

defn dir1 <> dir2 \/ a1 <> a2 :: :: DiffDA :: '' by

defn G , P , A |-E </ en : typLn // n /> :: :: ExpTypeL :: 'EInfL' by

defn typL1 comp typL2 /\ forall d , typL3 <> typL4 :: :: TypeCompB :: '' by


defn typL1 comp typL2 :: :: TypeComp :: '' by
-------------------------- :: Refl
typL comp typL

typL1 comp typL2
-------------------------- :: Sym
typL2 comp typL1

typL1 comp typL2
typL2 comp typL3
-------------------------- :: Trans
typL1 comp typL3

typL1 comp typL2
-------------------------- :: Rec
typ cons typL1 comp typ cons typL2

----------------------------------------------- :: SimplForm
U dir s </ [ a'm ] // m /> cons typL comp U dir s [ prod [</ a'm // m/>] ] cons typL

----------------------------------------------- :: Bool
U V 1 </ [a'm] // m /> cons typL comp U H 1 </ [a'm] // m /> cons typL


----------------------------------------------- :: Join
U dir s [ l1 ] cons U dir s [ l2 ] cons typL comp U dir s [ l1 add l2 ] cons typL


defn G , P , A |-E e : typL :: :: ExpType :: '' by

G |-V v : typ
----------------------------- :: Var
G , P , A |-E evar ( v ) : typ

G , P , A |-E e1 : typ
G , P , A |-E e2 : typ
A |- ClassOf binop typ
------------------------------------------- :: Binop
G , P , A |-E e1 binop typ e2 : typ

G , P , A |-E e : typ
A |- ClassOf monop typ
--------------------------------------------- :: Monop
G , P , A |-E monop typ e : typ

G , P , A |-E </ en : typLn // n />
---------------------------------------------- :: Tuple
G , P , A |-E (</ en // n />) : normalize </ typLn // n />

P |- f : forall </ dn // n />, forall </ sm // m />, </ typcj // j /> => typL1 -> typL2
G , P , A |-E (</ en // n />) : typL1'
A |- </ typcj [ </ dn <- d'n // n /> ; </ sm <- s'm // m />] // j />
typL1' comp typL1 [ </ dn <- d'n // n /> ; </ sm <- s'm // m />]
----------------------------------------------------------------------------------- :: Fun
G , P , A |-E f(</ en // n />) : typL2 [ </ dn <- d'n // n /> ; </ sm <- s'm // m />]

defn G , P , A |-EE </ en // n /> : typL :: :: ExpTypeBisL :: '' by

defn G , P , A |-EE e : typL :: :: ExpTypeBis :: '' by
G , P , A |-EE e : typL1
typL1 comp typL2
----------------------- :: Into
G , P , A |-EE e into typL2 : typL2

G , P , A |-EE </ en // n /> : typi </ [ am ] // m />
---------------------------------- :: Array
G , P , A |-EE [ </ en // n /> ] : D typi [ lenExpr </ en // n /> ] </ [ am ] // m />


defn G , P , A |-D </ deqn // n /> :: :: TypeDeqL :: '' by
defn G , P , A |-D deq :: :: TypeDeq :: '' by
G , P , A |-E e  : typL
typL comp typL'
G |-V </ vn // n /> : typL'
-------------------------------------------- :: EqnT
G , P , A |-D </ vn // n /> <:- e

G , P , A |-E e  : typL
typL comp typL'
G |-V </ vn // n /> : typL'
-------------------------------------------- :: EqnF
G , P , A |-D </ vn // n /> <|- e

foreach i has [ a1 , a2 ] . G , P , A |-D </ deqn [ x <- i ] // n />
------------------------------------------------------- :: Loop
G , P , A |-D for i = a1 to a2 do </ deqn // n /> done

defn nodeDef = nodeDef2 :: :: NodeEq :: 'NEq' by

defn P |- f : forall </ dn // n /> , forall </ sm // m /> , A => typL1 -> typL2 :: :: TypeNode :: '' by
</ xm : typm // m /> add </ yn : typ'n // n /> add </ tj : typ''j // j /> , P , A |-D </ deqk // k />
nodeDef =  node f ( </ xm : typm // m /> ) -> ( </ yn : typ'n // n /> ) vars ( </ tj : typ''j // j /> ) let </ deqk // k /> tel
------------------------------------------------------------------------------------------------------------- :: Node
P <- nodeDef |- f : forall </ dn // n /> , forall </ sm // m /> , A => </ typm // m /> -> </ typ'n // n />

|- 0 <= </ zn // n /> < 1 lshift i2
len </ zn // n/> = 1 lshift i1
nodeDef = table f ( x : U d s [ i1 ] ) -> ( y : U d s [ i2 ] ) [ </ zn // n /> ]
------------------------------------------------------------------------------------------------------------- :: Table
P <- nodeDef |- f : forall d , forall s, Logic (U d s) => U d s [ i1 ] -> U d s [ i2 ]


defn foreach i has [ a1 , a2 ] . G , P , A |-D </ deqn [ xn <- in ] // n /> :: :: TypeLDeq :: 'TDeq' by

